name: build

trigger:
  tags:
    include: ["v*"]
pr: none

pool:
  vmImage: "ubuntu-20.04"

stages:
  - stage: build
    jobs:
      - job: build_package
        displayName: Build Package
        steps:
          - task: UsePythonVersion@0
            displayName: Set python version
            inputs: { versionSpec: 3.9 }
          - script: |
              export VERSION=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              export COMMIT=`git rev-parse --verify ${BUILD_SOURCEBRANCH}`
              export BRANCH=`git ls-remote --heads origin | grep $COMMIT | sed "s/.*\///"`
              echo "Building $VERSION On branch $BRANCH"
              if [[ "$VERSION" == *stable* ]] && [[ $BRANCH != "master" ]]; then exit 1; fi
              if [[ "$VERSION" == *dev* ]] && [[ $BRANCH != "dev" ]]; then exit 1; fi
              export VERSION=${VERSION/stable}
              export VERSION=${VERSION/beta/b}
              echo $VERSION > assemblyline_service_client/VERSION
              sudo env "PATH=$PATH" python -m pip install --no-cache-dir -U wheel cython pip
              python setup.py bdist_wheel
          - publish: $(System.DefaultWorkingDirectory)/dist/
            artifact: dist
  - stage: deploy
    jobs:
      - job: deploy
        displayName: Deploy packages and containers
        variables:
          - group: deployment-information
        steps:
          - download: current
            artifact: dist
          - script: |
              set -xv  # Echo commands before they are run
              sudo env "PATH=$PATH" python -m pip install --no-cache-dir twine
              ls dist
              twine upload --skip-existing --repository-url $TEST_REPOSITORY_URL dist/*
            workingDirectory: $(Pipeline.Workspace)
            displayName: Deploy to Test PyPI
            env:
              TWINE_USERNAME: $(twineUsername)
              TWINE_PASSWORD: $(twinePassword)
          - script: |
              set -xv  # Echo commands before they are run
              sudo env "PATH=$PATH" python -m pip install --no-cache-dir twine
              ls dist
              twine upload --skip-existing dist/*
            workingDirectory: $(Pipeline.Workspace)
            displayName: Deploy to PyPI
            env:
              TWINE_USERNAME: $(twineUsername)
              TWINE_PASSWORD: $(twinePassword)
